{"version":3,"file":"tidb-readData-test.js","mappings":"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","sources":["webpack://typescript/external commonjs \"https://jslib.k6.io/k6-utils/1.2.0/index.js\"","webpack://typescript/external commonjs \"k6/metrics\"","webpack://typescript/external commonjs \"k6/x/sql\"","webpack://typescript/webpack/bootstrap","webpack://typescript/webpack/runtime/compat get default export","webpack://typescript/webpack/runtime/define property getters","webpack://typescript/webpack/runtime/hasOwnProperty shorthand","webpack://typescript/webpack/runtime/make namespace object","webpack://typescript/./src/tidb-readData-test.ts"],"sourcesContent":["module.exports = require(\"https://jslib.k6.io/k6-utils/1.2.0/index.js\");","module.exports = require(\"k6/metrics\");","module.exports = require(\"k6/x/sql\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* @ts-ignore */\nimport sql from 'k6/x/sql';\n/* @ts-ignore */\nimport { randomString, randomIntBetween } from \"https://jslib.k6.io/k6-utils/1.2.0/index.js\";\n\nimport { Counter } from 'k6/metrics';\n\n// Database connection setup\nconst dbHost = __ENV.DB_HOST || \"gateway01.ap-southeast-1.prod.aws.tidbcloud.com\";\nconst dbPort = __ENV.DB_PORT || \"4000\";\nconst dbName = __ENV.DB_NAME || \"test\";\nconst dbUser = __ENV.DB_USER || \"gL64LSe6ggDbrgk.root\";\nconst dbPassword = __ENV.DB_PASSWORD || \"password\";\nconst connectionString = `${dbUser}:${dbPassword}@tcp(${dbHost}:${dbPort})/${dbName}?tls=skip-verify`;\nconst db = sql.open('mysql', connectionString);\n\nconst reads = new Counter('rows_reads');\nconst SPLIT = ', ';\n\ninterface GeMetadata {\n    tenant_id: number;\n    ge_name: string;\n    columns: string;\n    indexes: string;\n}\n\nlet scenarios = {\n    readData: {\n        executor: 'ramping-vus',\n        exec: 'readData',\n        startTime: '6m', // Start after 10 minutes\n        startVUs: 50,\n        stages: [\n            { duration: '2m', target: 50 }, // Ramp up to 40 VUs over the first 5 minutes\n            { duration: '2m', target: 80 }  // Stay at 50 VUs for the next 5 minutes\n        ],\n        gracefulRampDown: '30s',\n    },\n};\n\n\n// Options configuration\nexport const options = {\n    discardResponseBodies: true,\n    scenarios: scenarios,\n};\n\nexport function setup() {\n    let checkTableQuery = `SELECT COUNT(*) AS table_exists \n                           FROM information_schema.tables \n                           WHERE table_schema = 'test' \n                             AND table_name = 'ge_metadata';`;\n\n    let res = sql.query(db,checkTableQuery);\n    if (res[0].table_exists === 0) {\n        throw new Error(\"Table 'ge_metadata' does not exist. Terminating the script.\");\n    } else {\n        console.log(\"Table 'ge_metadata' exists. Proceeding with the script.\");\n    }\n    // Additional setup logic, if any...\n}\n\n// Teardown function\nexport function teardown() {\n    db.close();\n}\n\nfunction readGeData(limit: number): GeMetadata[] {\n    let query = `SELECT tenant_id, ge_name, columns, indexes FROM ge_metadata ORDER BY RAND() LIMIT ${limit};`;\n    let resultSet = sql.query(db, query);\n    let geData: GeMetadata[] = [];\n\n    for (let row of resultSet) {\n        geData.push({\n            tenant_id: parseInt(String.fromCharCode(...row.tenant_id), 10),\n            ge_name: String.fromCharCode(...row.ge_name),\n            columns: String.fromCharCode(...row.columns),\n            indexes: String.fromCharCode(...row.indexes)\n        });\n    }\n\n    return geData;\n}\n\n// Function to read data from a GE table with different types of queries\nexport function readData() {\n    // Randomly select a GE metadata record\n    let { tenant_id, ge_name, columns, indexes }: GeMetadata = readGeData(1)[0];\n\n    let cols: string[] = [];\n    let defaultValueMap = new Map<string, string>(); // Map to store default values for each column\n    let indx = indexes.split(SPLIT);\n\n    columns.split(SPLIT).forEach(colDef => {\n        let [colName, colType] = colDef.trim().split(' ');\n        cols.push(colName);\n        let defaultValue = colType === 'VARCHAR(255)' ? `'${randomString(16)}'` :\n                           colType === 'INT' ? randomIntBetween(1, 10000).toString() :\n                           'NOW(3)'; // Default value for other types\n        defaultValueMap.set(colName, defaultValue);\n    });\n\n    let nonIndexedCols = cols.filter(col => !indx.includes(col));\n    let queryType = randomIntBetween(1, 3); // Randomly choose query type\n    let readQuery;\n\n    switch (queryType) {\n        case 1: // Queries using indexes\n            let randomCol = indx[randomIntBetween(0, indx.length - 1)];\n            let defaultValue = defaultValueMap.get(randomCol);\n            readQuery = `SELECT * FROM tenant_${tenant_id}_${ge_name} WHERE ${randomCol} = ${defaultValue} LIMIT 10;`;\n            break;\n        case 2: // Queries without indexes\n            let randomCol2 = nonIndexedCols[randomIntBetween(0, nonIndexedCols.length - 1)];\n            let defaultValue2 = defaultValueMap.get(randomCol2);\n            readQuery = `SELECT * FROM tenant_${tenant_id}_${ge_name} WHERE ${randomCol2} = ${defaultValue2} LIMIT 10;`;\n            break;\n        default: // Mixed queries\n            let randomIndexedCol = indx[randomIntBetween(0, indx.length - 1)];\n            let randomNonIndexedCol = nonIndexedCols[randomIntBetween(0, nonIndexedCols.length - 1)];\n            let defaultValueIndexed = defaultValueMap.get(randomIndexedCol);\n            readQuery = `SELECT * FROM tenant_${tenant_id}_${ge_name} WHERE ${randomIndexedCol} = ${defaultValueIndexed} AND ${randomNonIndexedCol} IS NOT NULL LIMIT 10;`;\n            break;\n    }\n\n    try {\n        console.log(readQuery);\n        let response = db.query(readQuery);\n        if (response != null){\n            console.log(`Read query type ${queryType} executed successfully`);\n            reads.add(1);\n        }\n    } catch (error) {\n        console.error(`Error executing read query type ${queryType}: ${error}`);\n    }\n}\n\n/* \nResults\n\ndata_received........: 0 B  0 B/s\ndata_sent............: 0 B  0 B/s\niteration_duration...: avg=3.54s min=116.87µs med=374.66ms max=1m38s p(90)=1.44s p(95)=31.67s\niterations...........: 4279 6.774115/s\nrows_reads...........: 3962 6.27227/s\nvus..................: 4    min=0      max=79\nvus_max..............: 80  \n\n1. Unresponsive at 65-70, with constant timeouts\n\n*/"],"names":["sql","randomString","randomIntBetween","Counter","dbHost","__ENV","DB_HOST","dbPort","DB_PORT","dbName","DB_NAME","dbUser","DB_USER","dbPassword","DB_PASSWORD","connectionString","concat","db","open","reads","SPLIT","scenarios","readData","executor","exec","startTime","startVUs","stages","duration","target","gracefulRampDown","options","discardResponseBodies","setup","checkTableQuery","res","query","table_exists","Error","console","log","teardown","close","readGeData","limit","resultSet","geData","_iterator","_createForOfIteratorHelper","_step","s","n","done","row","value","push","tenant_id","parseInt","String","fromCharCode","apply","_toConsumableArray","ge_name","columns","indexes","err","e","f","_readGeData$","cols","defaultValueMap","Map","indx","split","forEach","colDef","_colDef$trim$split","trim","_colDef$trim$split2","_slicedToArray","colName","colType","defaultValue","toString","set","nonIndexedCols","filter","col","includes","queryType","readQuery","randomCol","length","get","randomCol2","defaultValue2","randomIndexedCol","randomNonIndexedCol","defaultValueIndexed","response","add","error"],"sourceRoot":""}