{"version":3,"file":"tidb-test.js","mappings":"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","sources":["webpack://typescript/external commonjs \"k6/execution\"","webpack://typescript/./src/tidb-createGE-test.ts","webpack://typescript/./src/tidb-insertData-test.ts","webpack://typescript/./src/tidb-joinData-test.ts","webpack://typescript/./src/tidb-readData-test.ts","webpack://typescript/external commonjs \"https://jslib.k6.io/k6-utils/1.2.0/index.js\"","webpack://typescript/external commonjs \"k6/metrics\"","webpack://typescript/external commonjs \"k6/x/sql\"","webpack://typescript/webpack/bootstrap","webpack://typescript/webpack/runtime/compat get default export","webpack://typescript/webpack/runtime/define property getters","webpack://typescript/webpack/runtime/hasOwnProperty shorthand","webpack://typescript/webpack/runtime/make namespace object","webpack://typescript/./src/tidb-test.ts"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/execution\");","/* @ts-ignore */\nimport sql from 'k6/x/sql';\n/* @ts-ignore */\nimport {randomIntBetween} from \"https://jslib.k6.io/k6-utils/1.2.0/index.js\";\nimport exec from 'k6/execution';\nimport {Counter} from 'k6/metrics';\n\nconst SPLIT = ', ';\n// Database connection setup\nconst dbHost = __ENV.DB_HOST || \"10.0.132.214\";\nconst dbPort = __ENV.DB_PORT || \"4000\";\nconst dbName = __ENV.DB_NAME || \"test\";\nconst dbUser = __ENV.DB_USER || \"root\";\nconst dbPassword = __ENV.TIDB_PASSWORD || \"password\";\n\nconst connectionString = `${dbUser}:${dbPassword}@tcp(${dbHost}:${dbPort})/${dbName}?tls=skip-verify`;\nconst db = sql.open('mysql', connectionString);\nconst tables = new Counter('total_tables');\nconst types = ['VARCHAR(255)', 'BIGINT', 'DATETIME(5)'];\n\nlet scenarios = {\n    createGE: {\n        executor: 'ramping-vus',\n        exec: 'createGE',\n        startVUs: 20,\n        startTime: '0',\n        stages: [\n            {duration: '1m', target: 50}, // Stay at 50 VUs for the first 5 minutes\n            {duration: '4m', target: 20}, // Reduce to 20 VUs over the next 10 minutes\n            {duration: '1m', target: 10}   // Further reduce to 10 VUs for the last 5 minutes\n        ],\n        gracefulRampDown: '30s',\n    }\n};\n\n// Options configuration\nexport const options = {\n    discardResponseBodies: true,\n    scenarios: scenarios,\n};\n\nexport function setup() {\n    db.exec(`CREATE TABLE IF NOT EXISTS test.ge_metadata\n             (\n                 id        INT AUTO_INCREMENT PRIMARY KEY,\n                 tenant_id INT          NOT NULL,\n                 ge_name   VARCHAR(255) NOT NULL,\n                 columns   JSON         NOT NULL,\n                 indexes   JSON         NOT NULL\n             ) AUTO_ID_CACHE 1;`);\n}\n\n// Teardown function\nexport function teardown() {\n    db.close();\n}\n\n// Type guard to check if the error is a DBError\nfunction isDBError(error: unknown): error is DBError {\n    return (error as DBError).value !== undefined;\n}\n\n// Function to generate random columns\nfunction generateRandomColumns(): Column[] {\n    let columns: Column[] = [];\n    let numCols = randomIntBetween(3, 10); // Generate between 3 to 10 columns\n    let columnNames = new Set<string>(); // To track unique column names\n\n    while (columns.length < numCols) {\n        let type = types[randomIntBetween(0, types.length - 1)];\n        let colName = `col_${randomIntBetween(1000, 9999)}`;\n\n        // Ensure the column name is unique\n        if (!columnNames.has(colName)) {\n            columns.push({name: colName, type: type});\n            columnNames.add(colName); // Add to the set of known names\n        }\n    }\n    return columns;\n}\n\n// Function to select random indexes from the columns\nfunction selectRandomIndexes(columns: Column[], maxIndexes: number): Column[] {\n    let selectedIndexes = new Set<Column>(); // To keep track of selected indexes\n    while (selectedIndexes.size < Math.min(maxIndexes, columns.length)) {\n        const randomIndex = randomIntBetween(0, columns.length - 1);\n        selectedIndexes.add(columns[randomIndex]);\n    }\n    return Array.from(selectedIndexes);\n}\n\n// Create GE scenario\nexport function createGE(): void {\n    const tenantId = 1 + exec.vu.idInTest;\n    const geName = `ge_${exec.vu.iterationInScenario}`;\n    const columns = generateRandomColumns();\n    const [primaryKeyCol, ...otherColumns] = columns;\n    const indexes = selectRandomIndexes(otherColumns, 2);  // Select up to 2 columns for indexing\n    const createTableSQL = `CREATE TABLE tenant_${tenantId}_${geName}\n    (\n        ${primaryKeyCol.name}\n        ${primaryKeyCol.type === 'BIGINT' ? 'BIGINT AUTO_RANDOM' : primaryKeyCol.type}\n        ${otherColumns.map(({name, type}) => `, ${name} ${type}`).join('')},\n        PRIMARY KEY ( ${primaryKeyCol.name} )\n        );`;\n    const insertMetaSQL = `INSERT INTO ge_metadata (tenant_id, ge_name, columns, indexes)\n                           VALUES (${tenantId}, '${geName}',\n                                   '${JSON.stringify(columns)}',\n                                   '${JSON.stringify(indexes)}');`\n\n    // Create table\n    try {\n        db.exec(createTableSQL);\n        // Create indexes\n        indexes.forEach(indexCol => {\n            let createIndexSQL = `CREATE INDEX IF NOT EXISTS idx_${indexCol.name} ON tenant_${tenantId}_${geName} (${indexCol.name});`;\n            try {\n                db.exec(createIndexSQL);\n            } catch (error) {\n                console.error(`Error creating index on column ${indexCol.name} for tenant_${tenantId}_${geName}: ${error}`);\n                console.error(`Failed SQL: ${createIndexSQL}`);\n            }\n        });\n\n        // Insert metadata\n        try {\n            db.exec(insertMetaSQL);\n            tables.add(1);\n            console.log(`Table tenant_${tenantId}_${geName} created successfully`);\n        } catch (error) {\n            console.error(`Error inserting metadata for tenant_${tenantId}_${geName}: ${error}`);\n            console.error(`Failed SQL: ${insertMetaSQL}`);\n        }\n    } catch (error) {\n        if (isDBError(error) && error.value.number != 1050) {\n            console.error(`Error creating table tenant_${tenantId}_${geName}: ${error}`);\n            console.error(`Failed SQL: ${createTableSQL}`);\n            return; // Exit the function if table creation fails\n        }\n    }\n}\n\n/* \nResult\n\ndata_received........: 0 B 0 B/s\ndata_sent............: 0 B 0 B/s\niteration_duration...: avg=51.16s min=68.45µs med=57.7s max=1m12s p(90)=1m7s p(95)=1m9s\niterations...........: 230 0.602096/s\ntotal_tables.........: 230 0.602096/s\nvus..................: 0   min=0      max=50\nvus_max..............: 50  min=50     max=50\n\n\nDB side avg create \n\n*/","/* @ts-ignore */\nimport sql from 'k6/x/sql';\n/* @ts-ignore */\nimport {randomIntBetween, randomString} from \"https://jslib.k6.io/k6-utils/1.2.0/index.js\";\nimport {Counter} from 'k6/metrics';\n\n// Database connection setup\nconst dbHost = __ENV.DB_HOST || \"10.0.132.214\";\nconst dbPort = __ENV.DB_PORT || \"4000\";\nconst dbName = __ENV.DB_NAME || \"test\";\nconst dbUser = __ENV.DB_USER || \"root\";\nconst dbPassword = __ENV.TIDB_PASSWORD || \"password\";\nconst geCount = __ENV.GE_COUNT || \"115\";\n\nconst connectionString = `${dbUser}:${dbPassword}@tcp(${dbHost}:${dbPort})/${dbName}?tls=skip-verify`;\nconst db = sql.open('mysql', connectionString);\nconst inserts = new Counter('rows_inserts');\nconst SPLIT = ', ';\nconst MetaTableExistsQuery = `SELECT COUNT(*) AS table_exists FROM information_schema.tables  WHERE table_schema = 'test' AND table_name = 'ge_metadata';`;\nconst MetaCountQuery = `SELECT AUTO_INCREMENT FROM information_schema.tables WHERE table_schema = 'test' AND table_name = 'ge_metadata';`;\n\nlet scenarios = {\n    insertData: {\n        executor: 'ramping-vus',\n        exec: 'insertData',\n        startTime: '0m', // Start after 5 minutes\n        startVUs: 0,\n        stages: [\n            {duration: '2m', target: 50}, // Ramp up to 50 VUs over the first 5 minutes\n            {duration: '2m', target: 25} // Ramp down to  25 VUs for the next 10 minutes\n        ],\n        gracefulRampDown: '30s',\n    },\n};\n\n// Options configuration\nexport const options = {\n    discardResponseBodies: true,\n    scenarios: scenarios,\n};\n\nexport function setup() {\n    let res = sql.query(db, MetaTableExistsQuery);\n    let rowCount = parseInt(String.fromCharCode(res[0][\"table_exists\"]));\n    console.log(rowCount);\n    if (res[0].table_exists === 0) {\n        throw new Error(\"Table 'ge_metadata' does not exist. Terminating the script.\");\n    } else {\n        console.log(\"Table 'ge_metadata' exists. Proceeding with the script.\");\n        let res = sql.query(db, MetaCountQuery);\n        let rowCount = parseInt(String.fromCharCode(...res[0][\"AUTO_INCREMENT\"], 10));\n        return {rowCount};\n    }\n}\n\n// Teardown function\nexport function teardown() {\n    db.close();\n}\n\nfunction getRandomValueForType(type: string) {\n    switch (type) {\n        case 'VARCHAR(255)':\n            return `'${randomString(16)}'`;\n        case 'BIGINT':\n            return randomIntBetween(1, 10000).toString();\n        default:\n            return 'NOW(5)';\n    }\n}\n\n// Function to insert data into a GE table\nexport function insertData(data: { rowCount: number }) {\n    let geData = readGeData(data.rowCount);\n    let insertQuery = generateInsertQuery(geData.tenant_id, geData.ge_name, geData.columns);\n    try {\n        db.exec(insertQuery);\n        inserts.add(1);\n    } catch (error) {\n        console.error(`Error executing insert query: ${error}`);\n        console.error(`Failed SQL: ${insertQuery}`);\n    }\n}\n\nfunction readGeData(id: number): GeMetadata {\n    const randomID = randomIntBetween(1, id);\n    let query = `SELECT tenant_id, ge_name, columns, indexes FROM ge_metadata where id = ${randomID};`;\n    let resultSet = sql.query(db, query);\n    return {\n        tenant_id: parseInt(String.fromCharCode(...resultSet[0][\"tenant_id\"]), 10),\n        ge_name: String.fromCharCode(...resultSet[0][\"ge_name\"]),\n        columns: JSON.parse(String.fromCharCode(...resultSet[0][\"columns\"])),\n        indexes: JSON.parse(String.fromCharCode(...resultSet[0][\"indexes\"]))\n    };\n}\n\n// Function to generate the SQL query for inserting data\nfunction generateInsertQuery(tenantId: number, geName: string, columns: Column[]): string {\n    let cols: string[] = [];\n    let values: string[] = [];\n\n    const [primaryKeyCol, ...otherColumns] = columns;\n    if (primaryKeyCol.type !== 'BIGINT') {\n        cols.push(primaryKeyCol.name);\n        values.push(getRandomValueForType(primaryKeyCol.type));\n    }\n    otherColumns.forEach(col => {\n        cols.push(col.name);\n        values.push(getRandomValueForType(col.type));\n    });\n    return `INSERT INTO tenant_${tenantId}_${geName} (${cols.join(SPLIT)}) VALUES (${values.join(SPLIT)});`;\n}\n\n\n/*\nResult\n\ndata_received........: 0 B   0 B/s\ndata_sent............: 0 B   0 B/s\niteration_duration...: avg=118.81ms min=115.7µs med=111.18ms max=2.21s p(90)=132.32ms p(95)=149.11ms\niterations...........: 63142 150.1965/s\nrows_inserts.........: 62799 149.380602/s\nvus..................: 26    min=0        max=50\nvus_max..............: 50    min=50       max=50\n\n*/","/* @ts-ignore */\nimport sql from 'k6/x/sql';\n/* @ts-ignore */\nimport { randomString, randomIntBetween } from \"https://jslib.k6.io/k6-utils/1.2.0/index.js\";\n\nimport { Counter } from 'k6/metrics';\n\n// Database connection setup\nconst dbHost = __ENV.DB_HOST || \"10.0.132.214\";\nconst dbPort = __ENV.DB_PORT || \"4000\";\nconst dbName = __ENV.DB_NAME || \"test\";\nconst dbUser = __ENV.DB_USER || \"root\";\nconst dbPassword = __ENV.TIDB_PASSWORD || \"password\";\n\nconst connectionString = `${dbUser}:${dbPassword}@tcp(${dbHost}:${dbPort})/${dbName}?tls=skip-verify`;\nconst db = sql.open('mysql', connectionString);\n\nconst reads = new Counter('join_reads');\n\ninterface GeMetadata {\n    tenant_id: number;\n    ge_name: string;\n    columns: string;\n    indexes: string;\n}\n\nlet scenarios = {\n    readJoinData: {\n        executor: 'ramping-vus',\n        exec: 'readJoinData',\n        startTime: '10m', // Start after 15 minutes\n        startVUs: 50,\n        stages: [\n            { duration: '5m', target: 50 }  // Ramp up to 50 VUs over 5 minutes\n        ],\n        gracefulRampDown: '30s',\n    }\n};\n\n\n// Options configuration\nexport const options = {\n    discardResponseBodies: true,\n    scenarios: scenarios,\n};\n\nexport function setup() {\n    let checkTableQuery = `SELECT COUNT(*) AS table_exists \n                           FROM information_schema.tables \n                           WHERE table_schema = 'test' \n                             AND table_name = 'ge_metadata';`;\n\n    let res = sql.query(db, checkTableQuery);\n    if (res[0].table_exists === 0) {\n        throw new Error(\"Table 'ge_metadata' does not exist. Terminating the script.\");\n    } else {\n        console.log(\"Table 'ge_metadata' exists. Proceeding with the script.\");\n    }\n    // Additional setup logic, if any...\n}\n\n// Teardown function\nexport function teardown() {\n    db.close();\n}\n\nfunction readGeData(limit: number): GeMetadata[] {\n    let query = `SELECT tenant_id, ge_name, columns, indexes FROM ge_metadata ORDER BY RAND() LIMIT ${limit};`;\n    let resultSet = sql.query(db, query);\n    let geData: GeMetadata[] = [];\n\n    for (let row of resultSet) {\n        geData.push({\n            tenant_id: parseInt(String.fromCharCode(...row.tenant_id), 10),\n            ge_name: String.fromCharCode(...row.ge_name),\n            columns: String.fromCharCode(...row.columns),\n            indexes: String.fromCharCode(...row.indexes)\n        });\n    }\n    return geData;\n}\n\nfunction splitColumnsAndIndexes(metadata: GeMetadata): { cols: string[], indexes: string[] } {\n    const cols = metadata.columns.split(',').map(col => col.trim().split(' ')[0]);\n    const indexes = metadata.indexes.split(',').map(index => index.trim());\n    return { cols, indexes };\n}\n\nfunction generateJoinQuery(metadata1: GeMetadata, metadata2: GeMetadata, joinType: number): string {\n    const { cols: cols1, indexes: indexes1 } = splitColumnsAndIndexes(metadata1);\n    const { cols: cols2, indexes: indexes2 } = splitColumnsAndIndexes(metadata2);\n\n    let joinCol1: string, joinCol2: string;\n    switch (joinType) {\n        case 1: // Join between indexed and indexed columns\n            joinCol1 = indexes1[randomIntBetween(0, indexes1.length - 1)];\n            joinCol2 = indexes2[randomIntBetween(0, indexes2.length - 1)];\n            break;\n        case 2: // Join between indexed and non-indexed columns\n            joinCol1 = indexes1[randomIntBetween(0, indexes1.length - 1)];\n            joinCol2 = cols2.filter(col => !indexes2.includes(col))[randomIntBetween(0, cols2.length - 1)];\n            break;\n        default: // Join between two non-indexed columns\n            joinCol1 = cols1.filter(col => !indexes1.includes(col))[randomIntBetween(0, cols1.length - 1)];\n            joinCol2 = cols2.filter(col => !indexes2.includes(col))[randomIntBetween(0, cols2.length - 1)];\n            break;\n    }\n\n    return `SELECT * FROM tenant_${metadata1.tenant_id}_${metadata1.ge_name} a JOIN tenant_${metadata2.tenant_id}_${metadata2.ge_name} b ON a.${joinCol1} = b.${joinCol2} LIMIT 10;`;\n}\n\nexport function readJoinData() {\n    let [metadata1, metadata2] = readGeData(2);\n    if (!metadata1 || !metadata2) {\n        console.error('Insufficient GE metadata found for join reading');\n        return;\n    }\n\n    let queryType = Math.random() < 0.5 ? 1 : (Math.random() < 0.67 ? 2 : 3); // Randomly choose query type\n    let joinQuery = generateJoinQuery(metadata1, metadata2, queryType);\n\n    try {\n        let response = db.query(joinQuery);\n        if (response != null) {\n            console.log(`Read query type ${queryType} executed successfully`);\n            reads.add(1);\n        }\n    } catch (error) {\n        console.error(`Error executing join read query type ${queryType}: ${error}`);\n    }\n}\n\n/* \nResult\n\ndata_received........: 0 B   0 B/s\ndata_sent............: 0 B   0 B/s\niteration_duration...: avg=1.17s min=93.83µs med=363.85ms max=35.11s p(90)=786.17ms p(95)=1.69s\niterations...........: 13555 14.644529/s\njoin_reads...........: 8600  9.291254/s\nvus..................: 2     min=0       max=50\nvus_max..............: 50    min=50      max=50\n\n*/","/* @ts-ignore */\nimport sql from 'k6/x/sql';\n/* @ts-ignore */\nimport { randomString, randomIntBetween } from \"https://jslib.k6.io/k6-utils/1.2.0/index.js\";\n\nimport { Counter } from 'k6/metrics';\n\n// Database connection setup\nconst dbHost = __ENV.DB_HOST || \"10.0.132.214\";\nconst dbPort = __ENV.DB_PORT || \"4000\";\nconst dbName = __ENV.DB_NAME || \"test\";\nconst dbUser = __ENV.DB_USER || \"root\";\nconst dbPassword = __ENV.TIDB_PASSWORD || \"password\";\n\nconst connectionString = `${dbUser}:${dbPassword}@tcp(${dbHost}:${dbPort})/${dbName}?tls=skip-verify`;\nconst db = sql.open('mysql', connectionString);\n\nconst reads = new Counter('rows_reads');\nconst SPLIT = ', ';\n\ninterface GeMetadata {\n    tenant_id: number;\n    ge_name: string;\n    columns: string;\n    indexes: string;\n}\n\nlet scenarios = {\n    readData: {\n        executor: 'ramping-vus',\n        exec: 'readData',\n        startTime: '6m', // Start after 10 minutes\n        startVUs: 50,\n        stages: [\n            { duration: '2m', target: 50 }, // Ramp up to 40 VUs over the first 5 minutes\n            { duration: '2m', target: 80 }  // Stay at 50 VUs for the next 5 minutes\n        ],\n        gracefulRampDown: '30s',\n    },\n};\n\n\n// Options configuration\nexport const options = {\n    discardResponseBodies: true,\n    scenarios: scenarios,\n};\n\nexport function setup() {\n    let checkTableQuery = `SELECT COUNT(*) AS table_exists \n                           FROM information_schema.tables \n                           WHERE table_schema = 'test' \n                             AND table_name = 'ge_metadata';`;\n\n    let res = sql.query(db,checkTableQuery);\n    if (res[0].table_exists === 0) {\n        throw new Error(\"Table 'ge_metadata' does not exist. Terminating the script.\");\n    } else {\n        console.log(\"Table 'ge_metadata' exists. Proceeding with the script.\");\n    }\n    // Additional setup logic, if any...\n}\n\n// Teardown function\nexport function teardown() {\n    db.close();\n}\n\nfunction readGeData(limit: number): GeMetadata[] {\n    let query = `SELECT tenant_id, ge_name, columns, indexes FROM ge_metadata ORDER BY RAND() LIMIT ${limit};`;\n    let resultSet = sql.query(db, query);\n    let geData: GeMetadata[] = [];\n\n    for (let row of resultSet) {\n        geData.push({\n            tenant_id: parseInt(String.fromCharCode(...row.tenant_id), 10),\n            ge_name: String.fromCharCode(...row.ge_name),\n            columns: String.fromCharCode(...row.columns),\n            indexes: String.fromCharCode(...row.indexes)\n        });\n    }\n\n    return geData;\n}\n\n// Function to read data from a GE table with different types of queries\nexport function readData() {\n    // Randomly select a GE metadata record\n    let { tenant_id, ge_name, columns, indexes }: GeMetadata = readGeData(1)[0];\n\n    let cols: string[] = [];\n    let defaultValueMap = new Map<string, string>(); // Map to store default values for each column\n    let indx = indexes.split(SPLIT);\n\n    columns.split(SPLIT).forEach(colDef => {\n        let [colName, colType] = colDef.trim().split(' ');\n        cols.push(colName);\n        let defaultValue = colType === 'VARCHAR(255)' ? `'${randomString(16)}'` :\n                           colType === 'INT' ? randomIntBetween(1, 10000).toString() :\n                           'NOW(5)'; // Default value for other types\n        defaultValueMap.set(colName, defaultValue);\n    });\n\n    let nonIndexedCols = cols.filter(col => !indx.includes(col));\n    let queryType = randomIntBetween(1, 3); // Randomly choose query type\n    let readQuery;\n\n    switch (queryType) {\n        case 1: // Queries using indexes\n            let randomCol = indx[randomIntBetween(0, indx.length - 1)];\n            let defaultValue = defaultValueMap.get(randomCol);\n            readQuery = `SELECT * FROM tenant_${tenant_id}_${ge_name} WHERE ${randomCol} = ${defaultValue} LIMIT 10;`;\n            break;\n        case 2: // Queries without indexes\n            let randomCol2 = nonIndexedCols[randomIntBetween(0, nonIndexedCols.length - 1)];\n            let defaultValue2 = defaultValueMap.get(randomCol2);\n            readQuery = `SELECT * FROM tenant_${tenant_id}_${ge_name} WHERE ${randomCol2} = ${defaultValue2} LIMIT 10;`;\n            break;\n        default: // Mixed queries\n            let randomIndexedCol = indx[randomIntBetween(0, indx.length - 1)];\n            let randomNonIndexedCol = nonIndexedCols[randomIntBetween(0, nonIndexedCols.length - 1)];\n            let defaultValueIndexed = defaultValueMap.get(randomIndexedCol);\n            readQuery = `SELECT * FROM tenant_${tenant_id}_${ge_name} WHERE ${randomIndexedCol} = ${defaultValueIndexed} AND ${randomNonIndexedCol} IS NOT NULL LIMIT 10;`;\n            break;\n    }\n\n    try {\n        console.log(readQuery);\n        let response = db.query(readQuery);\n        if (response != null){\n            console.log(`Read query type ${queryType} executed successfully`);\n            reads.add(1);\n        }\n    } catch (error) {\n        console.error(`Error executing read query type ${queryType}: ${error}`);\n    }\n}\n\n/* \nResults\n\ndata_received........: 0 B  0 B/s\ndata_sent............: 0 B  0 B/s\niteration_duration...: avg=3.54s min=116.87µs med=374.66ms max=1m38s p(90)=1.44s p(95)=31.67s\niterations...........: 4279 6.774115/s\nrows_reads...........: 3962 6.27227/s\nvus..................: 4    min=0      max=79\nvus_max..............: 80  \n\n1. Unresponsive at 65-70, with constant timeouts\n\n*/","module.exports = require(\"https://jslib.k6.io/k6-utils/1.2.0/index.js\");","module.exports = require(\"k6/metrics\");","module.exports = require(\"k6/x/sql\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* @ts-ignore */\nimport sql from 'k6/x/sql';\nimport { createGE } from './tidb-createGE-test';\nimport { insertData } from './tidb-insertData-test';\nimport { readData } from './tidb-readData-test';\nimport { readJoinData } from './tidb-joinData-test';\n\n// Database connection setup\nconst dbHost = __ENV.DB_HOST || \"gateway01.ap-southeast-1.prod.aws.tidbcloud.com\";\nconst dbPort = __ENV.DB_PORT || \"4000\";\nconst dbName = __ENV.DB_NAME || \"test\";\nconst dbUser = __ENV.DB_USER || \"gL64LSe6ggDbrgk.root\";\nconst dbPassword = __ENV.DB_PASSWORD || \"password\";\nconst connectionString = `${dbUser}:${dbPassword}@tcp(${dbHost}:${dbPort})/${dbName}?tls=skip-verify`;\nconst db = sql.open('mysql', connectionString);\n\n// Scenarios configuration\n/*  Create     Insert     Read      Read with Join\n0   50           0          0           0\n5   20          50          0           0\n10  10          50          40          0\n15  0           0           50          50\n*/\n\nlet scenarios = {\n    createGE: {\n        executor: 'ramping-vus',\n        exec: 'createGE',\n        startVUs: 50,\n        stages: [\n            { duration: '10s', target: 50 }, // Stay at 50 VUs for the first 5 minutes\n            { duration: '20s', target: 20 }, // Reduce to 20 VUs over the next 10 minutes\n            { duration: '10s', target: 10 }   // Further reduce to 10 VUs for the last 5 minutes\n        ],\n        gracefulRampDown: '30s',\n    },\n    insertData: {\n        executor: 'ramping-vus',\n        exec: 'insertData',\n        startTime: '1m', // Start after 5 minutes\n        startVUs: 0,\n        stages: [\n            { duration: '1m', target: 50 }, // Ramp up to 50 VUs over the first 5 minutes\n            { duration: '1m', target: 25 } // Ramp down to  25 VUs for the next 10 minutes\n        ],\n        gracefulRampDown: '30s',\n    },\n    readData: {\n        executor: 'ramping-vus',\n        exec: 'readData',\n        startTime: '2m', // Start after 10 minutes\n        startVUs: 0,\n        stages: [\n            { duration: '2m', target: 40 }, // Ramp up to 40 VUs over the first 5 minutes\n            { duration: '4m', target: 50 }  // Stay at 50 VUs for the next 5 minutes\n        ],\n        gracefulRampDown: '30s',\n    },\n    readJoinData: {\n        executor: 'ramping-vus',\n        exec: 'readJoinData',\n        startTime: '4m', // Start after 15 minutes\n        startVUs: 0,\n        stages: [\n            { duration: '2m', target: 50 }  // Ramp up to 50 VUs over 5 minutes\n        ],\n        gracefulRampDown: '30s',\n    }\n};\n\n\n// Options configuration\nexport const options = {\n    discardResponseBodies: true,\n    scenarios: scenarios,\n};\n\nexport function setup() {\n    db.exec(`CREATE TABLE IF NOT EXISTS test.ge_metadata (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        tenant_id INT NOT NULL,\n        ge_name VARCHAR(255) NOT NULL,\n        columns TEXT NOT NULL,\n        indexes TEXT NOT NULL\n    );`);\n    // Additional setup logic...\n}\n\n// Teardown function\nexport function teardown() {\n    db.close();\n}\n\nexport { createGE, insertData, readData, readJoinData };\n"],"names":["sql","randomIntBetween","exec","Counter","SPLIT","dbHost","__ENV","DB_HOST","dbPort","DB_PORT","dbName","DB_NAME","dbUser","DB_USER","dbPassword","TIDB_PASSWORD","connectionString","concat","db","open","tables","types","scenarios","createGE","executor","startVUs","startTime","stages","duration","target","gracefulRampDown","options","discardResponseBodies","setup","teardown","close","isDBError","error","value","undefined","generateRandomColumns","columns","numCols","columnNames","Set","length","type","colName","has","push","name","add","selectRandomIndexes","maxIndexes","selectedIndexes","size","Math","min","randomIndex","Array","from","tenantId","vu","idInTest","geName","iterationInScenario","_columns","_toArray","primaryKeyCol","otherColumns","slice","indexes","createTableSQL","map","_ref","join","insertMetaSQL","JSON","stringify","forEach","indexCol","createIndexSQL","console","log","number","randomString","geCount","GE_COUNT","inserts","MetaTableExistsQuery","MetaCountQuery","insertData","res","query","rowCount","parseInt","String","fromCharCode","table_exists","Error","apply","_toConsumableArray","getRandomValueForType","toString","data","geData","readGeData","insertQuery","generateInsertQuery","tenant_id","ge_name","id","randomID","resultSet","parse","cols","values","col","reads","readJoinData","checkTableQuery","limit","_iterator","_createForOfIteratorHelper","_step","s","n","done","row","err","e","f","splitColumnsAndIndexes","metadata","split","trim","index","generateJoinQuery","metadata1","metadata2","joinType","_splitColumnsAndIndex","cols1","indexes1","_splitColumnsAndIndex2","cols2","indexes2","joinCol1","joinCol2","filter","includes","_readGeData","_readGeData2","_slicedToArray","queryType","random","joinQuery","response","readData","_readGeData$","defaultValueMap","Map","indx","colDef","_colDef$trim$split","_colDef$trim$split2","colType","defaultValue","set","nonIndexedCols","readQuery","randomCol","get","randomCol2","defaultValue2","randomIndexedCol","randomNonIndexedCol","defaultValueIndexed","DB_PASSWORD"],"sourceRoot":""}