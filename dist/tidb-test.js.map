{"version":3,"file":"tidb-test.js","mappings":"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","sources":["webpack://typescript/external commonjs \"k6/execution\"","webpack://typescript/./src/tidb-createGE-test.ts","webpack://typescript/./src/tidb-insertData-test.ts","webpack://typescript/./src/tidb-joinData-test.ts","webpack://typescript/./src/tidb-readData-test.ts","webpack://typescript/external commonjs \"https://jslib.k6.io/k6-utils/1.2.0/index.js\"","webpack://typescript/external commonjs \"k6/metrics\"","webpack://typescript/external commonjs \"k6/x/sql\"","webpack://typescript/webpack/bootstrap","webpack://typescript/webpack/runtime/compat get default export","webpack://typescript/webpack/runtime/define property getters","webpack://typescript/webpack/runtime/hasOwnProperty shorthand","webpack://typescript/webpack/runtime/make namespace object","webpack://typescript/./src/tidb-test.ts"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/execution\");","/* @ts-ignore */\nimport sql from 'k6/x/sql';\n/* @ts-ignore */\nimport { randomIntBetween } from \"https://jslib.k6.io/k6-utils/1.2.0/index.js\";\nimport exec from 'k6/execution';\nimport { Counter } from 'k6/metrics';\n\n// Database connection setup\nconst db = sql.open('mysql', 'gL64LSe6ggDbrgk.root:password@tcp(gateway01.ap-southeast-1.prod.aws.tidbcloud.com:4000)/test?tls=skip-verify');\nconst tables = new Counter('total_tables');\nconst SPLIT = ', ';\n\nlet scenarios = {\n    createGE: {\n        executor: 'ramping-vus',\n        exec: 'createGE',\n        startVUs: 20,\n        startTime: '0',\n        stages: [\n            { duration: '1m', target: 50 }, // Stay at 50 VUs for the first 5 minutes\n            { duration: '4m', target: 20 }, // Reduce to 20 VUs over the next 10 minutes\n            { duration: '1m', target: 10 }   // Further reduce to 10 VUs for the last 5 minutes\n        ],\n        gracefulRampDown: '30s',\n    }\n};\n\n// Options configuration\nexport const options = {\n    discardResponseBodies: true,\n    scenarios: scenarios,\n};\n\nexport function setup() {\n    db.exec(`CREATE TABLE IF NOT EXISTS test.ge_metadata (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        tenant_id INT NOT NULL,\n        ge_name VARCHAR(255) NOT NULL,\n        columns TEXT NOT NULL,\n        indexes TEXT NOT NULL\n    );`);\n}\n\n// Teardown function\nexport function teardown() {\n    db.close();\n}\n\n// Function to generate random columns\nfunction generateRandomColumns(): string[] {\n    const types = ['VARCHAR(255)', 'INT', 'DATETIME(3)'];\n    let columns = [];\n    let numCols = randomIntBetween(3, 10); // Generate between 3 to 10 columns\n    let columnNames = new Set(); // To track unique column names\n\n    while (columns.length < numCols) {\n        let type = types[randomIntBetween(0, types.length - 1)];\n        let colName = `col_${randomIntBetween(1000, 9999)}`;\n\n        // Ensure the column name is unique\n        if (!columnNames.has(colName)) {\n            columns.push(`${colName} ${type}`);\n            columnNames.add(colName); // Add to the set of known names\n        }\n    }\n\n    return columns;\n}\n\n// Function to select random indexes from the columns\nfunction selectRandomIndexes(columns: string[], maxIndexes: number): string[] {\n    let columnNames = columns.map(col => col.split(' ')[0]);\n    let selectedIndexes = new Set(); // To keep track of selected indexes\n    let indexes = [];\n\n    // Adjust to exclude primary key column (assuming it's the first column)\n    columnNames.shift();\n\n    while (indexes.length < Math.min(maxIndexes, columnNames.length)) {\n        let randomIndex = randomIntBetween(0, columnNames.length - 1);\n        let indexName = columnNames[randomIndex];\n\n        // Check if already selected, if not, add to the indexes array\n        if (!selectedIndexes.has(indexName)) {\n            indexes.push(indexName);\n            selectedIndexes.add(indexName);\n        }\n    }\n\n    return indexes;\n}\n\n// Create GE scenario\nexport function createGE(): void {\n    const tenantId = 1 + exec.vu.idInTest;\n    const geName = `ge_${exec.vu.iterationInScenario}`;\n    const columns = generateRandomColumns();\n    const indexes = selectRandomIndexes(columns, 4); // Select up to 4 columns for indexing\n    let primaryKeyCol = columns[0].split(' ')[0]; // Use the first column as the primary key\n    let createTableSQL = `CREATE TABLE tenant_${tenantId}_${geName} (${columns.join(SPLIT)}, PRIMARY KEY (${primaryKeyCol}));`;\n    let insertMetaSQL = `INSERT INTO ge_metadata (tenant_id, ge_name, columns, indexes) VALUES (${tenantId},'${geName}','${columns.join(SPLIT)}','${indexes.join(SPLIT)}');`\n\n    // Create table\n    try {\n        db.exec(createTableSQL);\n        console.log(`Table tenant_${tenantId}_${geName} created successfully`);\n\n        // Create indexes\n        indexes.forEach(indexCol => {\n            let createIndexSQL = `CREATE INDEX IF NOT EXISTS idx_${indexCol} ON tenant_${tenantId}_${geName} (${indexCol});`;\n            try {\n                db.exec(createIndexSQL);\n                console.log(`Index created successfully on column: ${indexCol}`);\n            } catch (error) {\n                console.error(`Error creating index on column ${indexCol} for tenant_${tenantId}_${geName}: ${error}`);\n                console.error(`Failed SQL: ${createIndexSQL}`);\n            }\n        });\n\n        // Insert metadata\n        try {\n            db.exec(insertMetaSQL);\n            tables.add(1);\n        } catch (error) {\n            console.error(`Error inserting metadata for tenant_${tenantId}_${geName}: ${error}`);\n            console.error(`Failed SQL: ${insertMetaSQL}`);\n        }\n    } catch (error) {\n        if (error.value.number != 1050) {\n            console.error(`Error creating table tenant_${tenantId}_${geName}: ${error}`);\n            console.error(`Failed SQL: ${createTableSQL}`);\n            return; // Exit the function if table creation fails\n        }\n    }\n}\n\n/* \nResult\n\ndata_received........: 0 B 0 B/s\ndata_sent............: 0 B 0 B/s\niteration_duration...: avg=51.16s min=68.45µs med=57.7s max=1m12s p(90)=1m7s p(95)=1m9s\niterations...........: 230 0.602096/s\ntotal_tables.........: 230 0.602096/s\nvus..................: 0   min=0      max=50\nvus_max..............: 50  min=50     max=50\n\n\nDB side avg create \n\n*/","/* @ts-ignore */\nimport sql from 'k6/x/sql';\n/* @ts-ignore */\nimport { randomString, randomIntBetween } from \"https://jslib.k6.io/k6-utils/1.2.0/index.js\";\n\nimport { Counter } from 'k6/metrics';\n\n// Database connection setup\nconst db = sql.open('mysql', 'gL64LSe6ggDbrgk.root:password@tcp(gateway01.ap-southeast-1.prod.aws.tidbcloud.com:4000)/test?tls=skip-verify');\nconst inserts = new Counter('rows_inserts');\nconst SPLIT = ', ';\n\ninterface GeMetadata {\n    tenant_id: number;\n    ge_name: string;\n    columns: string;\n    indexes: string;\n}\n\nlet scenarios = {\n    insertData: {\n        executor: 'ramping-vus',\n        exec: 'insertData',\n        startTime: '3m', // Start after 5 minutes\n        startVUs: 0,\n        stages: [\n            { duration: '2m', target: 50 }, // Ramp up to 50 VUs over the first 5 minutes\n            { duration: '2m', target: 25 } // Ramp down to  25 VUs for the next 10 minutes\n        ],\n        gracefulRampDown: '30s',\n    },\n};\n\n\n// Options configuration\nexport const options = {\n    discardResponseBodies: true,\n    scenarios: scenarios,\n};\n\nexport function setup() {\n    let checkTableQuery = `SELECT COUNT(*) AS table_exists \n                           FROM information_schema.tables \n                           WHERE table_schema = 'test' \n                             AND table_name = 'ge_metadata';`;\n\n    let res = sql.query(db, checkTableQuery);\n    if (res[0].table_exists === 0) {\n        throw new Error(\"Table 'ge_metadata' does not exist. Terminating the script.\");\n    } else {\n        console.log(\"Table 'ge_metadata' exists. Proceeding with the script.\");\n    }\n    // Additional setup logic, if any...\n}\n\n// Teardown function\nexport function teardown() {\n    db.close();\n}\n\nfunction readGeData(limit: number): GeMetadata[] {\n    let query = `SELECT tenant_id, ge_name, columns, indexes FROM ge_metadata ORDER BY RAND() LIMIT ${limit};`;\n    let resultSet = sql.query(db, query);\n    let geData: GeMetadata[] = [];\n\n    for (let row of resultSet) {\n        geData.push({\n            tenant_id: parseInt(String.fromCharCode(...row.tenant_id), 10),\n            ge_name: String.fromCharCode(...row.ge_name),\n            columns: String.fromCharCode(...row.columns),\n            indexes: String.fromCharCode(...row.indexes)\n        });\n    }\n\n    return geData;\n}\n\n\n// Function to generate the SQL query for inserting data\nfunction generateInsertQuery(tenantId: number, geName: string, columns: string): string {\n    let cols: string[] = [];\n    let values: string[] = [];\n\n    columns.split(SPLIT).forEach(colDef => {\n        let [colName, colType] = colDef.trim().split(' ');\n        cols.push(colName);\n        values.push(\n            colType === 'VARCHAR(255)' ? `'${randomString(16)}'` :\n                colType === 'INT' ? randomIntBetween(1, 10000).toString() :\n                    'NOW(3)'  // Default value for other types\n        );\n    });\n\n    return `INSERT INTO tenant_${tenantId}_${geName} (${cols.join(SPLIT)}) VALUES (${values});`;\n}\n\n\n// Function to insert data into a GE table\nexport function insertData() {\n    // Randomly select a GE metadata record\n    let { tenant_id, ge_name, columns }: GeMetadata = readGeData(1)[0];\n    let insertQuery = generateInsertQuery(tenant_id, ge_name, columns);\n    try {\n        db.exec(insertQuery);\n        inserts.add(1);\n    } catch (error) {\n        console.error(`Error executing insert query: ${error}`);\n        console.error(`Failed SQL: ${insertQuery}`);\n    }\n}\n\n/* \nResult\n\ndata_received........: 0 B   0 B/s\ndata_sent............: 0 B   0 B/s\niteration_duration...: avg=118.81ms min=115.7µs med=111.18ms max=2.21s p(90)=132.32ms p(95)=149.11ms\niterations...........: 63142 150.1965/s\nrows_inserts.........: 62799 149.380602/s\nvus..................: 26    min=0        max=50\nvus_max..............: 50    min=50       max=50\n\n*/","/* @ts-ignore */\nimport sql from 'k6/x/sql';\n/* @ts-ignore */\nimport { randomString, randomIntBetween } from \"https://jslib.k6.io/k6-utils/1.2.0/index.js\";\n\nimport { Counter } from 'k6/metrics';\n\n// Database connection setup\nconst db = sql.open('mysql', 'gL64LSe6ggDbrgk.root:password@tcp(gateway01.ap-southeast-1.prod.aws.tidbcloud.com:4000)/test?tls=skip-verify');\nconst reads = new Counter('join_reads');\n\ninterface GeMetadata {\n    tenant_id: number;\n    ge_name: string;\n    columns: string;\n    indexes: string;\n}\n\nlet scenarios = {\n    readJoinData: {\n        executor: 'ramping-vus',\n        exec: 'readJoinData',\n        startTime: '10m', // Start after 15 minutes\n        startVUs: 50,\n        stages: [\n            { duration: '5m', target: 50 }  // Ramp up to 50 VUs over 5 minutes\n        ],\n        gracefulRampDown: '30s',\n    }\n};\n\n\n// Options configuration\nexport const options = {\n    discardResponseBodies: true,\n    scenarios: scenarios,\n};\n\nexport function setup() {\n    let checkTableQuery = `SELECT COUNT(*) AS table_exists \n                           FROM information_schema.tables \n                           WHERE table_schema = 'test' \n                             AND table_name = 'ge_metadata';`;\n\n    let res = sql.query(db, checkTableQuery);\n    if (res[0].table_exists === 0) {\n        throw new Error(\"Table 'ge_metadata' does not exist. Terminating the script.\");\n    } else {\n        console.log(\"Table 'ge_metadata' exists. Proceeding with the script.\");\n    }\n    // Additional setup logic, if any...\n}\n\n// Teardown function\nexport function teardown() {\n    db.close();\n}\n\nfunction readGeData(limit: number): GeMetadata[] {\n    let query = `SELECT tenant_id, ge_name, columns, indexes FROM ge_metadata ORDER BY RAND() LIMIT ${limit};`;\n    let resultSet = sql.query(db, query);\n    let geData: GeMetadata[] = [];\n\n    for (let row of resultSet) {\n        geData.push({\n            tenant_id: parseInt(String.fromCharCode(...row.tenant_id), 10),\n            ge_name: String.fromCharCode(...row.ge_name),\n            columns: String.fromCharCode(...row.columns),\n            indexes: String.fromCharCode(...row.indexes)\n        });\n    }\n    return geData;\n}\n\nfunction splitColumnsAndIndexes(metadata: GeMetadata): { cols: string[], indexes: string[] } {\n    const cols = metadata.columns.split(',').map(col => col.trim().split(' ')[0]);\n    const indexes = metadata.indexes.split(',').map(index => index.trim());\n    return { cols, indexes };\n}\n\nfunction generateJoinQuery(metadata1: GeMetadata, metadata2: GeMetadata, joinType: number): string {\n    const { cols: cols1, indexes: indexes1 } = splitColumnsAndIndexes(metadata1);\n    const { cols: cols2, indexes: indexes2 } = splitColumnsAndIndexes(metadata2);\n\n    let joinCol1: string, joinCol2: string;\n    switch (joinType) {\n        case 1: // Join between indexed and indexed columns\n            joinCol1 = indexes1[randomIntBetween(0, indexes1.length - 1)];\n            joinCol2 = indexes2[randomIntBetween(0, indexes2.length - 1)];\n            break;\n        case 2: // Join between indexed and non-indexed columns\n            joinCol1 = indexes1[randomIntBetween(0, indexes1.length - 1)];\n            if (!joinCol1) {\n                break;\n            }\n            joinCol2 = cols2.filter(col => !indexes2.includes(col))[randomIntBetween(0, cols2.length - 1)];\n            break;\n        default: // Join between two non-indexed columns\n            joinCol1 = cols1.filter(col => !indexes1.includes(col))[randomIntBetween(0, cols1.length - 1)];\n            joinCol2 = cols2.filter(col => !indexes2.includes(col))[randomIntBetween(0, cols2.length - 1)];\n            break;\n    }\n\n    return `SELECT * FROM tenant_${metadata1.tenant_id}_${metadata1.ge_name} a JOIN tenant_${metadata2.tenant_id}_${metadata2.ge_name} b ON a.${joinCol1} = b.${joinCol2} LIMIT 10;`;\n}\n\nexport function readJoinData() {\n    let [metadata1, metadata2] = readGeData(2);\n    if (!metadata1 || !metadata2) {\n        console.error('Insufficient GE metadata found for join reading');\n        return;\n    }\n\n    let queryType = Math.random() < 0.5 ? 1 : (Math.random() < 0.67 ? 2 : 3); // Randomly choose query type\n    let joinQuery = generateJoinQuery(metadata1, metadata2, queryType);\n\n    try {\n        let response = db.query(joinQuery);\n        if (response != null) {\n            console.log(`Read query type ${queryType} executed successfully`);\n            reads.add(1);\n        }\n    } catch (error) {\n        console.error(`Error executing join read query type ${queryType}: ${error}`);\n    }\n}\n\n/* \nResult\n\ndata_received........: 0 B   0 B/s\ndata_sent............: 0 B   0 B/s\niteration_duration...: avg=1.17s min=93.83µs med=363.85ms max=35.11s p(90)=786.17ms p(95)=1.69s\niterations...........: 13555 14.644529/s\njoin_reads...........: 8600  9.291254/s\nvus..................: 2     min=0       max=50\nvus_max..............: 50    min=50      max=50\n\n*/","/* @ts-ignore */\nimport sql from 'k6/x/sql';\n/* @ts-ignore */\nimport { randomString, randomIntBetween } from \"https://jslib.k6.io/k6-utils/1.2.0/index.js\";\n\nimport { Counter } from 'k6/metrics';\n\n// Database connection setup\nconst db = sql.open('mysql', 'gL64LSe6ggDbrgk.root:password@tcp(gateway01.ap-southeast-1.prod.aws.tidbcloud.com:4000)/test?tls=skip-verify');\nconst reads = new Counter('rows_reads');\nconst SPLIT = ', ';\n\ninterface GeMetadata {\n    tenant_id: number;\n    ge_name: string;\n    columns: string;\n    indexes: string;\n}\n\nlet scenarios = {\n    readData: {\n        executor: 'ramping-vus',\n        exec: 'readData',\n        startTime: '6m', // Start after 10 minutes\n        startVUs: 50,\n        stages: [\n            { duration: '2m', target: 50 }, // Ramp up to 40 VUs over the first 5 minutes\n            { duration: '2m', target: 80 }  // Stay at 50 VUs for the next 5 minutes\n        ],\n        gracefulRampDown: '30s',\n    },\n};\n\n\n// Options configuration\nexport const options = {\n    discardResponseBodies: true,\n    scenarios: scenarios,\n};\n\nexport function setup() {\n    let checkTableQuery = `SELECT COUNT(*) AS table_exists \n                           FROM information_schema.tables \n                           WHERE table_schema = 'test' \n                             AND table_name = 'ge_metadata';`;\n\n    let res = sql.query(db,checkTableQuery);\n    if (res[0].table_exists === 0) {\n        throw new Error(\"Table 'ge_metadata' does not exist. Terminating the script.\");\n    } else {\n        console.log(\"Table 'ge_metadata' exists. Proceeding with the script.\");\n    }\n    // Additional setup logic, if any...\n}\n\n// Teardown function\nexport function teardown() {\n    db.close();\n}\n\nfunction readGeData(limit: number): GeMetadata[] {\n    let query = `SELECT tenant_id, ge_name, columns, indexes FROM ge_metadata ORDER BY RAND() LIMIT ${limit};`;\n    let resultSet = sql.query(db, query);\n    let geData: GeMetadata[] = [];\n\n    for (let row of resultSet) {\n        geData.push({\n            tenant_id: parseInt(String.fromCharCode(...row.tenant_id), 10),\n            ge_name: String.fromCharCode(...row.ge_name),\n            columns: String.fromCharCode(...row.columns),\n            indexes: String.fromCharCode(...row.indexes)\n        });\n    }\n\n    return geData;\n}\n\n// Function to read data from a GE table with different types of queries\nexport function readData() {\n    // Randomly select a GE metadata record\n    let { tenant_id, ge_name, columns, indexes }: GeMetadata = readGeData(1)[0];\n\n    let cols: string[] = [];\n    let defaultValueMap = new Map<string, string>(); // Map to store default values for each column\n    let indx = indexes.split(SPLIT);\n\n    columns.split(SPLIT).forEach(colDef => {\n        let [colName, colType] = colDef.trim().split(' ');\n        cols.push(colName);\n        let defaultValue = colType === 'VARCHAR(255)' ? `'${randomString(16)}'` :\n                           colType === 'INT' ? randomIntBetween(1, 10000).toString() :\n                           'NOW(3)'; // Default value for other types\n        defaultValueMap.set(colName, defaultValue);\n    });\n\n    let nonIndexedCols = cols.filter(col => !indx.includes(col));\n    let queryType = randomIntBetween(1, 3); // Randomly choose query type\n    let readQuery;\n\n    switch (queryType) {\n        case 1: // Queries using indexes\n            let randomCol = indx[randomIntBetween(0, indx.length - 1)];\n            let defaultValue = defaultValueMap.get(randomCol);\n            readQuery = `SELECT * FROM tenant_${tenant_id}_${ge_name} WHERE ${randomCol} = ${defaultValue} LIMIT 10;`;\n            break;\n        case 2: // Queries without indexes\n            let randomCol2 = nonIndexedCols[randomIntBetween(0, nonIndexedCols.length - 1)];\n            let defaultValue2 = defaultValueMap.get(randomCol2);\n            readQuery = `SELECT * FROM tenant_${tenant_id}_${ge_name} WHERE ${randomCol2} = ${defaultValue2} LIMIT 10;`;\n            break;\n        default: // Mixed queries\n            let randomIndexedCol = indx[randomIntBetween(0, indx.length - 1)];\n            let randomNonIndexedCol = nonIndexedCols[randomIntBetween(0, nonIndexedCols.length - 1)];\n            let defaultValueIndexed = defaultValueMap.get(randomIndexedCol);\n            readQuery = `SELECT * FROM tenant_${tenant_id}_${ge_name} WHERE ${randomIndexedCol} = ${defaultValueIndexed} AND ${randomNonIndexedCol} IS NOT NULL LIMIT 10;`;\n            break;\n    }\n\n    try {\n        console.log(readQuery);\n        let response = db.query(readQuery);\n        if (response != null){\n            console.log(`Read query type ${queryType} executed successfully`);\n            reads.add(1);\n        }\n    } catch (error) {\n        console.error(`Error executing read query type ${queryType}: ${error}`);\n    }\n}\n\n/* \nResults\n\ndata_received........: 0 B  0 B/s\ndata_sent............: 0 B  0 B/s\niteration_duration...: avg=3.54s min=116.87µs med=374.66ms max=1m38s p(90)=1.44s p(95)=31.67s\niterations...........: 4279 6.774115/s\nrows_reads...........: 3962 6.27227/s\nvus..................: 4    min=0      max=79\nvus_max..............: 80  \n\n1. Unresponsive at 65-70, with constant timeouts\n\n*/","module.exports = require(\"https://jslib.k6.io/k6-utils/1.2.0/index.js\");","module.exports = require(\"k6/metrics\");","module.exports = require(\"k6/x/sql\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* @ts-ignore */\nimport sql from 'k6/x/sql';\nimport { createGE } from './tidb-createGE-test';\nimport { insertData } from './tidb-insertData-test';\nimport { readData } from './tidb-readData-test';\nimport { readJoinData } from './tidb-joinData-test';\n\n// Database connection setup\nconst db = sql.open('mysql', 'gL64LSe6ggDbrgk.root:password@tcp(gateway01.ap-southeast-1.prod.aws.tidbcloud.com:4000)/test?tls=skip-verify');\n\n// Scenarios configuration\n/*  Create     Insert     Read      Read with Join\n0   50           0          0           0\n5   20          50          0           0\n10  10          50          40          0\n15  0           0           50          50\n*/\n\nlet scenarios = {\n    createGE: {\n        executor: 'ramping-vus',\n        exec: 'createGE',\n        startVUs: 50,\n        stages: [\n            { duration: '10s', target: 50 }, // Stay at 50 VUs for the first 5 minutes\n            { duration: '20s', target: 20 }, // Reduce to 20 VUs over the next 10 minutes\n            { duration: '10s', target: 10 }   // Further reduce to 10 VUs for the last 5 minutes\n        ],\n        gracefulRampDown: '30s',\n    },\n    insertData: {\n        executor: 'ramping-vus',\n        exec: 'insertData',\n        startTime: '1m', // Start after 5 minutes\n        startVUs: 0,\n        stages: [\n            { duration: '1m', target: 50 }, // Ramp up to 50 VUs over the first 5 minutes\n            { duration: '1m', target: 25 } // Ramp down to  25 VUs for the next 10 minutes\n        ],\n        gracefulRampDown: '30s',\n    },\n    readData: {\n        executor: 'ramping-vus',\n        exec: 'readData',\n        startTime: '2m', // Start after 10 minutes\n        startVUs: 0,\n        stages: [\n            { duration: '2m', target: 40 }, // Ramp up to 40 VUs over the first 5 minutes\n            { duration: '4m', target: 50 }  // Stay at 50 VUs for the next 5 minutes\n        ],\n        gracefulRampDown: '30s',\n    },\n    readJoinData: {\n        executor: 'ramping-vus',\n        exec: 'readJoinData',\n        startTime: '4m', // Start after 15 minutes\n        startVUs: 0,\n        stages: [\n            { duration: '2m', target: 50 }  // Ramp up to 50 VUs over 5 minutes\n        ],\n        gracefulRampDown: '30s',\n    }\n};\n\n\n// Options configuration\nexport const options = {\n    discardResponseBodies: true,\n    scenarios: scenarios,\n    ext: {\n        loadimpact: {\n            // Project: Default project\n            projectID: 3674428,\n            // Test runs with the same name groups test runs together.\n            name: 'Test (19/12/2023-08:03:00)'\n        }\n    }\n};\n\nexport function setup() {\n    db.exec(`CREATE TABLE IF NOT EXISTS test.ge_metadata (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        tenant_id INT NOT NULL,\n        ge_name VARCHAR(255) NOT NULL,\n        columns TEXT NOT NULL,\n        indexes TEXT NOT NULL\n    );`);\n    // Additional setup logic...\n}\n\n// Teardown function\nexport function teardown() {\n    db.close();\n}\n\nexport { createGE, insertData, readData, readJoinData };\n"],"names":["sql","randomIntBetween","exec","Counter","db","open","tables","SPLIT","scenarios","createGE","executor","startVUs","startTime","stages","duration","target","gracefulRampDown","options","discardResponseBodies","setup","teardown","close","generateRandomColumns","types","columns","numCols","columnNames","Set","length","type","colName","concat","has","push","add","selectRandomIndexes","maxIndexes","map","col","split","selectedIndexes","indexes","shift","Math","min","randomIndex","indexName","tenantId","vu","idInTest","geName","iterationInScenario","primaryKeyCol","createTableSQL","join","insertMetaSQL","console","log","forEach","indexCol","createIndexSQL","error","value","number","randomString","inserts","insertData","checkTableQuery","res","query","table_exists","Error","readGeData","limit","resultSet","geData","_iterator","_createForOfIteratorHelper","_step","s","n","done","row","tenant_id","parseInt","String","fromCharCode","apply","_toConsumableArray","ge_name","err","e","f","generateInsertQuery","cols","values","colDef","_colDef$trim$split","trim","_colDef$trim$split2","_slicedToArray","colType","toString","_readGeData$","insertQuery","reads","readJoinData","splitColumnsAndIndexes","metadata","index","generateJoinQuery","metadata1","metadata2","joinType","_splitColumnsAndIndex","cols1","indexes1","_splitColumnsAndIndex2","cols2","indexes2","joinCol1","joinCol2","filter","includes","_readGeData","_readGeData2","queryType","random","joinQuery","response","readData","defaultValueMap","Map","indx","defaultValue","set","nonIndexedCols","readQuery","randomCol","get","randomCol2","defaultValue2","randomIndexedCol","randomNonIndexedCol","defaultValueIndexed","ext","loadimpact","projectID","name"],"sourceRoot":""}