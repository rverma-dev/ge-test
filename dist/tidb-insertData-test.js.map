{"version":3,"file":"tidb-insertData-test.js","mappings":"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","sources":["webpack://typescript/external commonjs \"https://jslib.k6.io/k6-utils/1.2.0/index.js\"","webpack://typescript/external commonjs \"k6/metrics\"","webpack://typescript/external commonjs \"k6/x/sql\"","webpack://typescript/webpack/bootstrap","webpack://typescript/webpack/runtime/compat get default export","webpack://typescript/webpack/runtime/define property getters","webpack://typescript/webpack/runtime/hasOwnProperty shorthand","webpack://typescript/webpack/runtime/make namespace object","webpack://typescript/./src/tidb-insertData-test.ts"],"sourcesContent":["module.exports = require(\"https://jslib.k6.io/k6-utils/1.2.0/index.js\");","module.exports = require(\"k6/metrics\");","module.exports = require(\"k6/x/sql\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* @ts-ignore */\nimport sql from 'k6/x/sql';\n/* @ts-ignore */\nimport {randomIntBetween, randomString} from \"https://jslib.k6.io/k6-utils/1.2.0/index.js\";\nimport {Counter} from 'k6/metrics';\n\n// Database connection setup\nconst dbHost = __ENV.DB_HOST || \"10.0.132.214\";\nconst dbPort = __ENV.DB_PORT || \"4000\";\nconst dbName = __ENV.DB_NAME || \"test\";\nconst dbUser = __ENV.DB_USER || \"root\";\nconst dbPassword = __ENV.TIDB_PASSWORD || \"password\";\nconst geCount = __ENV.GE_COUNT || \"115\";\n\nconst connectionString = `${dbUser}:${dbPassword}@tcp(${dbHost}:${dbPort})/${dbName}?tls=skip-verify`;\nconst db = sql.open('mysql', connectionString);\nconst inserts = new Counter('rows_inserts');\nconst SPLIT = ', ';\nconst MetaTableExistsQuery = `SELECT COUNT(*) AS table_exists FROM information_schema.tables  WHERE table_schema = 'test' AND table_name = 'ge_metadata';`;\nconst MetaCountQuery = `SELECT AUTO_INCREMENT FROM information_schema.tables WHERE table_schema = 'test' AND table_name = 'ge_metadata';`;\n\nlet scenarios = {\n    insertData: {\n        executor: 'ramping-vus',\n        exec: 'insertData',\n        startTime: '0m', // Start after 5 minutes\n        startVUs: 0,\n        stages: [\n            {duration: '2m', target: 50}, // Ramp up to 50 VUs over the first 5 minutes\n            {duration: '2m', target: 25} // Ramp down to  25 VUs for the next 10 minutes\n        ],\n        gracefulRampDown: '30s',\n    },\n};\n\n// Options configuration\nexport const options = {\n    discardResponseBodies: true,\n    scenarios: scenarios,\n};\n\nexport function setup() {\n    let res = sql.query(db, MetaTableExistsQuery);\n    let rowCount = parseInt(String.fromCharCode(res[0][\"table_exists\"]));\n    console.log(rowCount);\n    if (res[0].table_exists === 0) {\n        throw new Error(\"Table 'ge_metadata' does not exist. Terminating the script.\");\n    } else {\n        console.log(\"Table 'ge_metadata' exists. Proceeding with the script.\");\n        let res = sql.query(db, MetaCountQuery);\n        let rowCount = parseInt(String.fromCharCode(...res[0][\"AUTO_INCREMENT\"], 10));\n        return {rowCount};\n    }\n}\n\n// Teardown function\nexport function teardown() {\n    db.close();\n}\n\nfunction getRandomValueForType(type: string) {\n    switch (type) {\n        case 'VARCHAR(255)':\n            return `'${randomString(16)}'`;\n        case 'BIGINT':\n            return randomIntBetween(1, 10000).toString();\n        default:\n            return 'NOW(5)';\n    }\n}\n\n// Function to insert data into a GE table\nexport function insertData(data: { rowCount: number }) {\n    let geData = readGeData(data.rowCount);\n    let insertQuery = generateInsertQuery(geData.tenant_id, geData.ge_name, geData.columns);\n    try {\n        db.exec(insertQuery);\n        inserts.add(1);\n    } catch (error) {\n        console.error(`Error executing insert query: ${error}`);\n        console.error(`Failed SQL: ${insertQuery}`);\n    }\n}\n\nfunction readGeData(id: number): GeMetadata {\n    const randomID = randomIntBetween(1, id);\n    let query = `SELECT tenant_id, ge_name, columns, indexes FROM ge_metadata where id = ${randomID};`;\n    let resultSet = sql.query(db, query);\n    return {\n        tenant_id: parseInt(String.fromCharCode(...resultSet[0][\"tenant_id\"]), 10),\n        ge_name: String.fromCharCode(...resultSet[0][\"ge_name\"]),\n        columns: JSON.parse(String.fromCharCode(...resultSet[0][\"columns\"])),\n        indexes: JSON.parse(String.fromCharCode(...resultSet[0][\"indexes\"]))\n    };\n}\n\n// Function to generate the SQL query for inserting data\nfunction generateInsertQuery(tenantId: number, geName: string, columns: Column[]): string {\n    let cols: string[] = [];\n    let values: string[] = [];\n\n    const [primaryKeyCol, ...otherColumns] = columns;\n    if (primaryKeyCol.type !== 'BIGINT') {\n        cols.push(primaryKeyCol.name);\n        values.push(getRandomValueForType(primaryKeyCol.type));\n    }\n    otherColumns.forEach(col => {\n        cols.push(col.name);\n        values.push(getRandomValueForType(col.type));\n    });\n    return `INSERT INTO tenant_${tenantId}_${geName} (${cols.join(SPLIT)}) VALUES (${values.join(SPLIT)});`;\n}\n\n\n/*\nResult\n\ndata_received........: 0 B   0 B/s\ndata_sent............: 0 B   0 B/s\niteration_duration...: avg=118.81ms min=115.7µs med=111.18ms max=2.21s p(90)=132.32ms p(95)=149.11ms\niterations...........: 63142 150.1965/s\nrows_inserts.........: 62799 149.380602/s\nvus..................: 26    min=0        max=50\nvus_max..............: 50    min=50       max=50\n\n*/"],"names":["sql","randomIntBetween","randomString","Counter","dbHost","__ENV","DB_HOST","dbPort","DB_PORT","dbName","DB_NAME","dbUser","DB_USER","dbPassword","TIDB_PASSWORD","geCount","GE_COUNT","connectionString","concat","db","open","inserts","SPLIT","MetaTableExistsQuery","MetaCountQuery","scenarios","insertData","executor","exec","startTime","startVUs","stages","duration","target","gracefulRampDown","options","discardResponseBodies","setup","res","query","rowCount","parseInt","String","fromCharCode","console","log","table_exists","Error","apply","_toConsumableArray","teardown","close","getRandomValueForType","type","toString","data","geData","readGeData","insertQuery","generateInsertQuery","tenant_id","ge_name","columns","add","error","id","randomID","resultSet","JSON","parse","indexes","tenantId","geName","cols","values","_columns","_toArray","primaryKeyCol","otherColumns","slice","push","name","forEach","col","join"],"sourceRoot":""}