{"version":3,"file":"tidb-insertData-test.js","mappings":"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","sources":["webpack://typescript/external commonjs \"https://jslib.k6.io/k6-utils/1.2.0/index.js\"","webpack://typescript/external commonjs \"k6/metrics\"","webpack://typescript/external commonjs \"k6/x/sql\"","webpack://typescript/webpack/bootstrap","webpack://typescript/webpack/runtime/compat get default export","webpack://typescript/webpack/runtime/define property getters","webpack://typescript/webpack/runtime/hasOwnProperty shorthand","webpack://typescript/webpack/runtime/make namespace object","webpack://typescript/./src/tidb-insertData-test.ts"],"sourcesContent":["module.exports = require(\"https://jslib.k6.io/k6-utils/1.2.0/index.js\");","module.exports = require(\"k6/metrics\");","module.exports = require(\"k6/x/sql\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* @ts-ignore */\nimport sql from 'k6/x/sql';\n/* @ts-ignore */\nimport {randomString, randomIntBetween} from \"https://jslib.k6.io/k6-utils/1.2.0/index.js\";\n\nimport {Counter} from 'k6/metrics';\n\n// Database connection setup\nconst dbHost = __ENV.DB_HOST || \"10.0.132.214\";\nconst dbPort = __ENV.DB_PORT || \"4000\";\nconst dbName = __ENV.DB_NAME || \"test\";\nconst dbUser = __ENV.DB_USER || \"root\";\nconst dbPassword = __ENV.TIDB_PASSWORD || \"password\";\nconst geCount = __ENV.GE_COUNT || \"115\";\n\nconst connectionString = `${dbUser}:${dbPassword}@tcp(${dbHost}:${dbPort})/${dbName}?tls=skip-verify`;\nconst db = sql.open('mysql', connectionString);\nconst inserts = new Counter('rows_inserts');\n\nconst SPLIT = ', ';\n\ninterface GeMetadata {\n    tenant_id: number;\n    ge_name: string;\n    columns: string;\n    indexes: string;\n}\n\nlet scenarios = {\n    insertData: {\n        executor: 'ramping-vus',\n        exec: 'insertData',\n        startTime: '0m', // Start after 5 minutes\n        startVUs: 0,\n        stages: [\n            {duration: '2m', target: 50}, // Ramp up to 50 VUs over the first 5 minutes\n            {duration: '2m', target: 25} // Ramp down to  25 VUs for the next 10 minutes\n        ],\n        gracefulRampDown: '30s',\n    },\n};\n\n\n// Options configuration\nexport const options = {\n    discardResponseBodies: true,\n    scenarios: scenarios,\n};\n\nexport function setup() {\n    let checkTableQuery = `SELECT COUNT(*) AS table_exists\n                           FROM information_schema.tables\n                           WHERE table_schema = 'test'\n                             AND table_name = 'ge_metadata';`;\n\n    let res = sql.query(db, checkTableQuery);\n    if (res[0].table_exists === 0) {\n        throw new Error(\"Table 'ge_metadata' does not exist. Terminating the script.\");\n    } else {\n        console.log(\"Table 'ge_metadata' exists. Proceeding with the script.\");\n    }\n    // Below section is not working, currently hardcoding this\n    // let rowCountQuery = `SELECT AUTO_INCREMENT\n    //                      FROM information_schema.tables\n    //                      WHERE table_schema = 'test'\n    //                        AND table_name = 'ge_metadata';`;\n    // let rowCountResult = sql.query(db, rowCountQuery);\n    // let rowCount = rowCountResult[0].AUTO_INCREMENT[0];\n    let rowCount:number = parseInt(geCount, 10  );\n    // Additional setup logic, if any...\n    return {rowCount};\n}\n\n// Teardown function\nexport function teardown() {\n    db.close();\n}\n\nfunction readGeData(id: number): GeMetadata[] {\n    let query = `SELECT tenant_id, ge_name, columns, indexes\n                 FROM ge_metadata\n                 where id = ${id};`;\n    let resultSet = sql.query(db, query);\n    let geData: GeMetadata[] = [];\n\n    for (let row of resultSet) {\n        geData.push({\n            tenant_id: parseInt(String.fromCharCode(...row.tenant_id), 10),\n            ge_name: String.fromCharCode(...row.ge_name),\n            columns: String.fromCharCode(...row.columns),\n            indexes: String.fromCharCode(...row.indexes)\n        });\n    }\n\n    return geData;\n}\n\n\n// Function to generate the SQL query for inserting data\nfunction generateInsertQuery(tenantId: number, geName: string, columns: string): string {\n    let cols: string[] = [];\n    let values: string[] = [];\n\n    columns.split(SPLIT).forEach(colDef => {\n        let [colName, colType] = colDef.trim().split(' ');\n        cols.push(colName);\n        values.push(\n            colType === 'VARCHAR(255)' ? `'${randomString(16)}'` :\n                colType === 'INT' ? randomIntBetween(1, 10000).toString() :\n                    'NOW(3)'  // Default value for other types\n        );\n    });\n\n    return `INSERT INTO tenant_${tenantId}_${geName} (${cols.join(SPLIT)})\n            VALUES (${values});`;\n}\n\n\n// Function to insert data into a GE table\nexport function insertData(data: { rowCount: number }) {\n    // Randomly select a GE metadata record\n    const randomID = randomIntBetween(1, data.rowCount);\n    let {tenant_id, ge_name, columns}: GeMetadata = readGeData(randomID)[0];\n    let insertQuery = generateInsertQuery(tenant_id, ge_name, columns);\n    try {\n        db.exec(insertQuery);\n        inserts.add(1);\n    } catch (error) {\n        console.error(`Error executing insert query: ${error}`);\n        console.error(`Failed SQL: ${insertQuery}`);\n    }\n}\n\n/* \nResult\n\ndata_received........: 0 B   0 B/s\ndata_sent............: 0 B   0 B/s\niteration_duration...: avg=118.81ms min=115.7µs med=111.18ms max=2.21s p(90)=132.32ms p(95)=149.11ms\niterations...........: 63142 150.1965/s\nrows_inserts.........: 62799 149.380602/s\nvus..................: 26    min=0        max=50\nvus_max..............: 50    min=50       max=50\n\n*/"],"names":["sql","randomString","randomIntBetween","Counter","dbHost","__ENV","DB_HOST","dbPort","DB_PORT","dbName","DB_NAME","dbUser","DB_USER","dbPassword","TIDB_PASSWORD","geCount","GE_COUNT","connectionString","concat","db","open","inserts","SPLIT","scenarios","insertData","executor","exec","startTime","startVUs","stages","duration","target","gracefulRampDown","options","discardResponseBodies","setup","checkTableQuery","res","query","table_exists","Error","console","log","rowCount","parseInt","teardown","close","readGeData","id","resultSet","geData","_iterator","_createForOfIteratorHelper","_step","s","n","done","row","value","push","tenant_id","String","fromCharCode","apply","_toConsumableArray","ge_name","columns","indexes","err","e","f","generateInsertQuery","tenantId","geName","cols","values","split","forEach","colDef","_colDef$trim$split","trim","_colDef$trim$split2","_slicedToArray","colName","colType","toString","join","data","randomID","_readGeData$","insertQuery","add","error"],"sourceRoot":""}